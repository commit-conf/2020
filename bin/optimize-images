#!/usr/bin/env node

const sharp = require("sharp");
const fs = require("fs");
const SVGO = require("svgo/lib/svgo");

// https://github.com/svg/svgo/blob/master/examples/test.js
svgo = new SVGO({});

function optimize({ sourceDir, size }) {
  const destinationDir = sourceDir.replace("/original", "");
  return new Promise((resolve, reject) => {
    fs.readdir(sourceDir, function(err, files) {
      if (err) {
        console.log("Unable to scan directory: " + err);
        reject(err);
      }
      files.forEach(file => {
        console.log("Optimizing image " + file);
        let destinationFilename = file
          .replace("[^a-zA-Z0-9]+", "-")
          .replace(".jpeg", ".jpg")
          .replace(".png", ".jpg");
        if (file.endsWith(".svg")) {
          try {
            const data = fs.readFileSync(`${sourceDir}/${file}`, "utf8");
            svgo
              .optimize(data, {
                path: `${destinationDir}/${destinationFilename}`
              })
              .then(({ data }) => {
                fs.writeFileSync(
                  `${destinationDir}/${destinationFilename}`,
                  data
                );
              });
          } catch (error) {
            console.log(error);
          }
        } else {
          let result = sharp(`${sourceDir}/${file}`)
            .resize(size, undefined, {
              withoutEnlargement: true
            })
            .jpeg()
            .flatten({ background: { r: 255, g: 255, b: 255 } });
          result
            .clone()
            .toBuffer()
            .then(data => {
              fs.writeFileSync(
                `${destinationDir}/${destinationFilename}`,
                data
              );
            })
            .catch(err => {
              console.log(err);
            });
          result
            .clone()
            .webp({ quality: 65 })
            .toBuffer()
            .then(data => {
              fs.writeFileSync(
                `${destinationDir}/${destinationFilename.replace(
                  ".jpg",
                  ".webp"
                )}`,
                data
              );
            })
            .catch(err => {
              console.log(err);
            });
        }
      });
      resolve();
    });
  });
}

return Promise.all([
  optimize({
    sourceDir: "static/img/communities/original",
    size: 240
  }),
  optimize({
    sourceDir: "static/img/sponsors/original",
    size: 240
  })
]);
